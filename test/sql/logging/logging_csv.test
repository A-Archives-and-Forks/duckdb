# name: test/sql/logging/logging_csv.test
# description: Test csv formatted log storages (stdout & file)
# group: [logging]

require noforcestorage

# Enable FileSystem logging to single csv file  
statement ok
pragma enable_logging(['FileSystem'], storage='file', storage_config={'path': '__TEST_DIR__/logging_csv_log.csv'});

# Read some data to trigger FileSystem log
statement ok
FROM "data/csv/big_number.csv"

# Ensure we can reparse the structured log message from the csv
query III
SELECT 
	scope, 
	path: parse_duckdb_log_message('FileSystem', message)['path'],
	op: parse_duckdb_log_message('FileSystem', message)['op'],
FROM "__TEST_DIR__/logging_csv_log.csv"
WHERE path = 'data/csv/big_number.csv';
----
CONNECTION	data/csv/big_number.csv	OPEN
CONNECTION	data/csv/big_number.csv	READ
CONNECTION	data/csv/big_number.csv	READ
CONNECTION	data/csv/big_number.csv	CLOSE

statement ok
pragma disable_logging

# Truncating the logs will clear the csv log file
statement ok
pragma truncate_duckdb_logs;

query I
select count(*) FROM "__TEST_DIR__/logging_csv_log.csv";
----
0

# Enable FileSystem logging to normalized files  
statement ok
pragma enable_logging(['FileSystem'], storage='file', storage_config={'entries_path': '__TEST_DIR__/logging_csv_log_entries.csv', 'contexts_path': '__TEST_DIR__/logging_csv_log_contexts.csv'});

# Read some data to trigger FileSystem log
statement ok
FROM "data/csv/big_number.csv"

# Ensure we can reparse the structured log message from the csv
query III
SELECT 
	context_id is not null, 
	path: parse_duckdb_log_message('FileSystem', message)['path'],
	op: parse_duckdb_log_message('FileSystem', message)['op'],
FROM "__TEST_DIR__/logging_csv_log_entries.csv"
WHERE path = 'data/csv/big_number.csv';
----
1	data/csv/big_number.csv	OPEN
1	data/csv/big_number.csv	READ
1	data/csv/big_number.csv	READ
1	data/csv/big_number.csv	CLOSE

# Contexts are now in a separate csv file
query I
SELECT scope
FROM "__TEST_DIR__/logging_csv_log_contexts.csv";
----
CONNECTION
CONNECTION
CONNECTION

statement ok
pragma disable_logging;

# Truncating the logs will clear both csv files
statement ok
pragma truncate_duckdb_logs;

query I
select count(*) FROM "__TEST_DIR__/logging_csv_log_contexts.csv";
----
0

query I
select count(*) FROM "__TEST_DIR__/logging_csv_log.csv";
----
0

statement ok
pragma enable_logging(['FileSystem'], storage='stdout');

# TODO: we can't nicely test logging to stdout without polluting test runner output

statement ok
pragma truncate_duckdb_logs;

statement ok
pragma disable_logging;

# Both stdout and file logging have a buffer size param which controls when the buffered csv data is written out. This is currently hard to test though since
# we flush these buffers after every query anyways

statement ok
pragma enable_logging(['FileSystem'], storage='stdout', storage_config={'buffer_size': 1000000}); 

statement ok
pragma disable_logging;

# Try some invalid configs ensuring they throw nice errors 

statement error
pragma enable_logging(['FileSystem'], storage='stdout', storage_config={'bla': 'bla'});
----
Invalid Input Error: Unrecognized log storage config option: 'bla'

statement error
pragma enable_logging(['FileSystem'], storage='stdout', storage_config={'path': './file.csv'});
----
Invalid Input Error: Unrecognized log storage config option: 'path'
